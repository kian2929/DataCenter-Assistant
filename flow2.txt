Fisrt and foremost, we need an improvement to code:

Instead of the current implementation, we should check if a domain has an update available from the reposnse of this call:
GET /v1/releases/domains/{domainId}/future-releases
Check the API reference to see its exact response structure.

Essentially, we'd want to capture the whole return JSON. Let's capture it in "domainX_nextRelease"

If multiple items exist in the response, then we shall only consider the oldest one that fits the criteri below:
- domainX_nextRelease["version"] > current VCF version >= domainX_nextRelease["minCompatibleVcfVersion"] (In coordinator.py, we already capture the current version of our VCF)
- domainX_nextRelease["applicabilityStatus"] == "APPLICABLE" and domainX_nextRelease["isApplicable"] == true

We can get the release date information by domainX_nextRelease["releaseDate"]

All other means of retrieving information about update status update details should be removed from the code, as this is a better way to do it.

------------------





For each domain where we have an update available we should gather more information. We can get more information about an update/upgrade from the reposnse of this call:
GET /v1/releases/domains/{domainId}/future-releases
Check the API reference to see its exact response structure.

Essentially, we'd want to capture "bom" list, "isApplicable" and 






We need to improve the enitity "VCF domainX Status" and have an attribute called "Next VCF BOM"
This attribute should contain information we shall get from the response of







For each domain, there should be an entity to allow user to trigger upgrade to the available new version of VCF. Named someting like "VCF domainX Start Upgrade"
This entity should be a button, and if it is pressed when there's no VCF update available, they should be a message in Home Asistant stating a relevant situation. then this flow is done.
If it was pressed when there is a update available, a relevant message should be also displayed and the flow below should start executing.

The entity "VCF domainX Status" should change to value "update_process_started"

There should be another entity to track update status, maybe something like "VCF domainX Upgrade Status". This should have value "waiting_for_initiation" when there is no update flow happening
There should be another entity to track update logs, maybe something like "VCF domainX Upgrade Logs". I want to use this entity to deliver dynamic markdown messages to a dashboard card. Default value should be a tidy markdown saying "No Messages" or something like that.

----------


























----------

we need to "target" the next vcf version for the domain we are working on.

"VCF domainX Upgrade Status" should change to "setting_new_vcf_version_target"

PATCH /v1/releases/domains/{domainID}

body should have:
{
    "targetVersion": "<next VCF version here>" (I think this is next_version_info.versionNumber in coordinator.py better double checl)
}
look into API reference if you need more details.

-----------

After targeting is done, we need to check if SDDC manager needs to be upgraded.

Check the response you get from session.get(upgradables_url, headers=headers, params=params, ssl=False) (modify component_updates in coordinator.py to be able to capture this info from the get go, if you think that's better.)
If you see only one upgradable in the response and it has "bundleType": "SDDC_MANAGER", it means we need to upgrade the SDDC manager first.

If we really need to upgrade SDDC manager first, we need to do this:
"VCF domainX Upgrade Status" should change to "downloading_sddcManager_bundle"
To start download the relevant bundle (remember, bundleID you get from component_updates (coordinator.py)):
PATCH /v1/bundles/{bundleID}
in body should be "downloadNow": true (check API referece for exact implementation)

You can check if download&validation is complete by repeadetly calling this endpoint (make it 30sec interval)
GET /v1/bundles/{bundleID}
Check until you see "downloadStatus": "SUCCESSFUL". (see API reference if you need to know exact notation)


After this, we need to proceed with the upgrading od SDDC manager.
"VCF domainX Upgrade Status" should change to "upgrading_sddcManager"

Keep in mind , during the upgrade of SDDC Manager, the API will become completely unavailable. I would expect it to say unavailable for at least 1 hour.
But you should have a mechanism to check if it available again somehow. Thing is, Even when it becomes pingable, it might not be ready yet. Best would be trying to GET /vi/domains and try until it works again. When it starts working, wait additional 5 minutes.










-------------

However, if we don't need to upgrade SDDC manager first, we need to skip all SDDC-manager steps from above and just follow a similar flow for all other components.
In component_updates (coordinator.py) you probably are






-------------

After "target"ing is done, we should run "checks".

"VCF domainX Upgrade Status" should change to "initializing_prechecks"

GET /v1/system/check-sets/queries
body:
{
    "checkSetType": "UPGRADE",
    "domains": [
        {
            "domainId": "(domain ID)"
        }
    ]
}

from response:
Extract queryId (UUID)
extract resources list

"VCF domainX Upgrade Status" should change to "running_prechecks"

POST /v1/system/check-sets

{
  "queryId": "<queryId from previous step>",
  "resources": [
    {
      "resourceId": "resources list > resourceId",
      "type": "resources list > resourceType",
      "targetVersion": "component-target-version (not sure where to get this from)"
    },
    ... (for each component)
  ],
  "targetVersion": "overall-vcf-target-version (next vcf version)"
}

extract "id" (this is the precheck process ID)

"VCF domainX Upgrade Status" should change to "evaluating_prechecks"
set argument "timeout"

GET /v1/system/check-sets/{id}  (<- precheck process ID)

you will need to do this API call multiple times in a loop until it finishes. Response will be pretty big and I am unfamiliar. You'd need to test it out.

In the end, I want to have all errors and warnings in "VCF domainX Upgrade Logs" as a nice markdown

also, use a timeout of for this repeat api call loop. make it 40 minutes

"VCF domainX Upgrade Status" should change to "prechecks_done"

------

If there was any error or warning in prechecks:
> Keep warnings and errors in "VCF domainX Upgrade Logs"
> See if the entity "VCF domainX ignore alerts" is positive (implement this entity. I rather it is a home assistant slider on/off)

If "VCF domainX ignore alerts" is positive, continue with the flow.
If "VCF domainX ignore alerts" is negative, 
> "VCF domainX Upgrade Status" should change to "waiting_for_alert_acknowledgement"
> wait for the entity "VCF domainX acknowlege alerts" to be pressed (you'd need to implement it too, should be a button)

if button is pressed, set "VCF domainX Upgrade Status" should change to "alerts_were_acknowledged". in "VCF domainX Upgrade Logs" show "Alerts were acknowledged. Continuing". Continue the flow
if not pressed, keep waiting indefinitively.

------

This is where the actual upgrades begin.

set "VCF domainX Upgrade Status" should change to "starting_upgrades"






from GET /v1/upgradables/domains/{domainId}/?targetVersion=<nextVersion_versionNumber>, you'd see what component has "status":  "AVAILABLE". You will be able to upgrade these.

you could refer to https://developer.broadcom.com/xapis/vmware-cloud-foundation-api/latest/upgrades/ and more importantly to https://developer.broadcom.com/xapis/vmware-cloud-foundation-api/latest/v1/upgrades/post/on how to do the upgrades

you may or may not need to do upgrade pre-checks too. See https://developer.broadcom.com/xapis/vmware-cloud-foundation-api/latest/v1/upgrades/upgradeId/prechecks/post/

For each component upgrade, have 3 hour timeout

Go through all component upgrades in a similar fashion.

I know this is complitcated. You'd need to try & fail with some test scripts. Refer to API reference when you need it.

-------

After going through all upgardes, if nothing left, do
POST /v1/releases/domains/{domainID}/validations

and you should have a body like this (generally you don't need more K-V, just one below is enough according to my tests. Otherwise, additional keys with empty values bring you back errors):

{
    "targetVersion": "5.2.1.0" (<- so, next VCF version here)
}

look into API reference if you need more details. 

You'd have a response and in this response there's "executionStatus" K-V. It can be IN_PROGRESS, FAILED, COMPLETED, UNKNOWN, SKIPPED, CANCELLED, CANCELLATION_IN_PROGRESS

If you have "COMPLETED", then set "VCF domainX Upgrade Status" value "successfuly_completed"
then set it to default "waiting_for_initiation"

If you have anything else, fail.

-------------------------

IF AT ANY POINT WE FAIL OR REACH A TIMEOUT set "VCF domainX Upgrade Status" to "failed"

-------------------------

in "VCF domainX Upgrade Logs" show the default "No Messages" or something
