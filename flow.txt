------------------------------------------------

get the Domain Information with
GET /v1/domains
consider returned domains, where status="ACTIVE"

if, no domains were found, fail setup of the integration.

(Enumerate all mentioned variables with the prefix domainx_ where x is a integer >= 1)
From the response, capture "id" and "name" in appropriately named variables

get SDDC manager information with
GET /v1/sddc-managers

from the response match the domain id with returns to find sddc manager id of each domain detected and capture it (not to mention the said prefix should be added)

------------------------------------------------
Following (everything) must be done for each domain detected. It should be done regularly, and there should be an additional button to trigger the process manually. (Do not forget prefixes with variables)
------------------------------------------------

get current VCF version
GET /v1/releases?domainId={domainID}


# GET /v1/bundles to get a list of available bundles
### from these bundles, consider all bundles with the sub-string "VMware Cloud Foundaton (version)" in the "description"
### if there is none, report entity with state "up to date" and with no additional attributes.
### if there are such bundles, consider the oldest one by looking at "releaseDate". 
##### Capture the string "VMware Cloud Foundaton (version)" as nextVersion_versionDescription
##### Capture the version as nextVersion_versionNumber
##### Capture the value of "releaseDate" as nextVersion_releaseDate
##### Capture the id into the list nextVersion_bundlesToDownload
##### Check if key "components" (list) has a component with "type" "SDDC_MANAGER". If yes temporarily capture "toVersion".
##### Get current SDDC Manager version (GET /v1/sddc-managers/{id}) and compare. If update is actually needed (current version < update version)

# GET /v1/upgradables/domains/{domainId}/?targetVersion=<nextVersion_versionNumber>
to get what other bundles are needed and what compenents they are for
# (for each component) GET /V1/bundles/{componentBundleID} to capture details about each component. get the field "description". Capture as nextVersion_componentUpdates = {componentUpdate1: [id, description, version]}

In the end, somehow report to HomeAssistant an entity for the current domain "update available" with the attributes as VCF next version available (nextVersion_versionNumber) and also additional attributes as nextVersion_componentUpdates>componentUpdateX>description : nextVersion_componentUpdates>componentUpdateX>version


------------------------------------------------

Actual upgrade workflow TBD






